// <auto-generated />
using Flarine.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Flarine.Database.Migrations
{
    [DbContext(typeof(MySQLContext))]
    partial class MySQLContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Flarine.Database.Entity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountGuid");

                    b.Property<string>("UserId");

                    b.Property<string>("UserSecret");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Flarine.Database.Entity.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Accuracy");

                    b.Property<int>("AchieveId");

                    b.Property<int>("AchievePoint");

                    b.Property<string>("AchieveTitleKey");

                    b.Property<string>("ActivatedAccountHeroPetId");

                    b.Property<int>("Agility");

                    b.Property<float>("AttackSpeed");

                    b.Property<int>("BeadPowder");

                    b.Property<int>("BeadSocketCount");

                    b.Property<int>("BestFieldOfHonorSuccessiveVictories");

                    b.Property<int>("Block");

                    b.Property<int>("BossMonsterKillCount");

                    b.Property<int>("ComposeSuccessCount");

                    b.Property<int>("ContinentId");

                    b.Property<int>("CostumeId");

                    b.Property<bool>("CostumeVisible");

                    b.Property<int>("Critical");

                    b.Property<int>("CurrentFieldOfHonorSuccessiveVictories");

                    b.Property<int>("Dia");

                    b.Property<int>("Difficulty1DungeonClearCount");

                    b.Property<int>("Difficulty2DungeonClearCount");

                    b.Property<int>("Difficulty3DungeonClearCount");

                    b.Property<int>("Dodge");

                    b.Property<bool>("DualRequestRefused");

                    b.Property<int>("Exp");

                    b.Property<int>("FaceId");

                    b.Property<int>("FameId");

                    b.Property<int>("FamePoint");

                    b.Property<string>("FameTitleKey");

                    b.Property<int>("FieldOfHonorRanking");

                    b.Property<bool>("FieldOfHonorRankingChangePushEnabled");

                    b.Property<string>("FieldOfHonorRankingRewardTime");

                    b.Property<int>("Fp");

                    b.Property<string>("FreeItemPickTime");

                    b.Property<string>("FreePetPickTime");

                    b.Property<int>("Gold");

                    b.Property<int>("Heart");

                    b.Property<int>("HeroId");

                    b.Property<int>("Hp");

                    b.Property<int>("HpPotionAutoRate");

                    b.Property<int>("HpRecovery");

                    b.Property<DateTime>("HpUpdateTime");

                    b.Property<int>("Intelligence");

                    b.Property<int>("InventoryExtendLoginDuration");

                    b.Property<int>("InventorySlotCount");

                    b.Property<bool>("IsLootEtc");

                    b.Property<bool>("IsLootGearGrade1");

                    b.Property<bool>("IsLootGearGrade2");

                    b.Property<bool>("IsLootGearGrade3");

                    b.Property<bool>("IsLootGearGrade4");

                    b.Property<bool>("IsLootGearGrade5");

                    b.Property<bool>("IsLootGold");

                    b.Property<bool>("IsLootJewel");

                    b.Property<bool>("IsLootMonsterEssense");

                    b.Property<bool>("IsLootPotion");

                    b.Property<int>("LastCompletedMainChapterId");

                    b.Property<int>("Level");

                    b.Property<int>("MagicPowder");

                    b.Property<int>("MagicalDefense");

                    b.Property<int>("MagicalOffense");

                    b.Property<int>("MaxHp");

                    b.Property<int>("MaxMp");

                    b.Property<int>("MonsterKillCount");

                    b.Property<int>("MountTier");

                    b.Property<float>("MoveSpeed");

                    b.Property<int>("Mp");

                    b.Property<int>("MpRecovery");

                    b.Property<DateTime>("MpUdpateTime");

                    b.Property<string>("Name");

                    b.Property<int>("OpenedContinentId");

                    b.Property<int>("OwnDia");

                    b.Property<int>("OwnGold");

                    b.Property<int?>("ParentAccountId");

                    b.Property<bool>("PartyInviteRefused");

                    b.Property<int>("PetEquipSlotCout");

                    b.Property<int>("PhysicalDefense");

                    b.Property<int>("PhysicalOffense");

                    b.Property<int>("PickPoint");

                    b.Property<int>("PkPoint");

                    b.Property<bool>("PushEnabled");

                    b.Property<bool>("ReceiveMailPushEnabled");

                    b.Property<int>("ReceivedCheerCount");

                    b.Property<int>("Stamina");

                    b.Property<int>("StarEssense");

                    b.Property<int>("StatAgility");

                    b.Property<bool>("StatAutoDistribution");

                    b.Property<int>("StatIntelligence");

                    b.Property<int>("StatPoint");

                    b.Property<int>("StatStamina");

                    b.Property<int>("StatStrength");

                    b.Property<int>("Strength");

                    b.Property<int>("TotalPurchasedDia");

                    b.Property<bool>("TradeRequestRefused");

                    b.Property<int>("Tradition");

                    b.Property<bool>("TrainingTimePushEnabled");

                    b.Property<int>("TranscendSuccessCount");

                    b.Property<int>("VipLevel");

                    b.Property<int>("WarehouseExtendLoginDuration");

                    b.Property<int>("WarehouseGold");

                    b.Property<int>("WarehouseOwnGold");

                    b.Property<int>("WarehouseSlotCount");

                    b.Property<bool>("WhisperRefused");

                    b.HasKey("Id");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("Heros");
                });

            modelBuilder.Entity("Flarine.Database.Entity.Hero", b =>
                {
                    b.HasOne("Flarine.Database.Entity.Account", "ParentAccount")
                        .WithMany("AccountHeros")
                        .HasForeignKey("ParentAccountId");
                });
#pragma warning restore 612, 618
        }
    }
}
